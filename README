doRedis: A simple parallel backend for foreach using Redis.

WARNING: doRedis is in an early alpha state.

Steve Weston's foreach package is a remarkable parametric evaluation device for
the R language. Similarly to lapply-like functions, foreach maps functions to
data and aggregates results. Even better, foreach lets you do this in parallel
across multiple CPU cores and computers.  And even better yet, foreach
abstracts the parallel computing details into modular back-end code. Code
written using foreach works sequentially in the absence of a parallel back-end,
and works uniformly across a growing variety of different back-ends. Think
of foreach as the lingua Franca of parallel computing for R.

Please examine the foreach package documentation for more information about it.

Redis is a powerful, fast networked database with many innovative features,
among them a blocking stack-like data structure (Redis "lists"). This feature
makes Redis useful as a lightweight backend for parallel computing, similar to
REvolution Computing's NetWorkSpaces. The rredis package provides a native R
interface to Redis. The doRedis package defines a simple parallel backend for
foreach that uses Redis.

Here is a quick example procedure for experimenting with doRedis:

1. Install Redis on your *nix machine (not available for Windows).
2. Install foreach, rredis and doRedis packages.
3. Start the redis server running (see the redis documentation). We assume
   that the server is running on the host "localhost" and port 6379 (the
   default Redis port).
4. Open an R session that will act as a back-end worker process. Run the
   following:

   require('doRedis')
   redisWorker('jobs')

   (The R session will freeze, blocking for work.)

5. Open another R session that will act as the master process. Run the
   following example:

   require('doRedis')
   registerDoRedis('jobs')
   foreach(j=1:5) %dopar% sqrt(j)

   You should see the following results:
      [[1]]
      [1] 1

      [[2]]
      [1] 1.414214

      [[3]]
      [1] 1.732051

      [[4]]
      [1] 2

      [[5]]
      [1] 2.236068


DISCUSSION

The "jobs" parameter of the redisWorker and registerDoRedis function specifies
a Redis "list" that will be used to transfer data between the master and worker
processes. Think of this name as a reference to a job queue. You are free to
configure multiple queues with different sets of workers. In the above example,
at least three Redis key names are actually used: "jobs," "jobs.env," and
"jobs.out." The "jobs.env" and "jobs.out" lists are used internally by doRedis
to transfer job environment and results data. 

Unlike many other parallel computing packages for R, doRedis does *not* provide
process management functions, although basic worker spawning scripts will
eventually be added. Right now, one must start worker processes manually.

Worker processes may come and go at will.  The master process does not care
about the number of available worker processes.  Worker processes may be
scheduled to run dynamically, for example by a batch job scheduler or resource
scavenger like Condor. Similarly, if a job is running too slow, more worker
processes may be added dynamically any time to pick up slack.

The doRedis backend accepts a parameter called "chunkSize" that sets the
number of function evaluations to be doled out per job. The default value
is one. Increasing chunkSize can improve performance greatly for quick-running
function evaluations. Here is an example that sets the chunkSize to 100:

foreach(j=1:5, .options.redis=list(chunkSize=100)) %dopar%  ...

The redisWorker function is used to manually invoke worker processes that
listen for jobs on a specified queue. The function also has parameters
for a Redis host and port number. For example, if the Redis server is
running on a host called "Cazart" with the default Redis port 6379:

redisWorker('jobs', host='Cazart', port=6379)

The registerDoRedis function also contains host and port parameters. Neither
the worker nor master R session needs to be running on the same machine as
the Redis server.

Although Redis is a *nix-only database (for now), the doRedis package may
be used on Windows computers to run workers. In fact, users are free to set
up hybrid mixtures of workers.

We'll add documentation and some internal package improvements soon...
